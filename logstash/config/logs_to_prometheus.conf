input {
  file {
    type => "nginx_access"
    path => ["/var/log/nginx/access*.log"]
    exclude => ["*.gz"]
  }
}

filter {
  if [type] == "nginx_access" {
    grok {
      patterns_dir => "/etc/logstash/patterns"
      match => { "message" => "%{NGINX_ACCESS}"}
      remove_tag => ["_grokparsefailure"]
      add_tag => ["nginx_access"]
    }
    geoip {
      source => "remote_addr"
      add_tag => [ "geoip" ]
    }
    useragent {
      source => "http_user_agent"
      add_tag => [ "useragent" ]
    }
    mutate {
      # replace comma and space with comma - removing space in otherwords
      # remove double quotes
      gsub => [
        "upstream_addr", ",\s", ",",
        "upstream_addr", "\"", "",
        "upstream_status", ",\s", ",",
        "upstream_status", "\"", "",
        "upstream_connect_time", ",\s", ",",
        "upstream_connect_time", "\"", "",
        "upstream_response_length", ",\s", ",",
        "upstream_response_length", "\"", "",
        "request_time", ",\s", ",",
        "request_time", "\"", "",
        "upstream_response_time", ",\s", ",",
        "upstream_response_time", "\"", ""
      ]
      # now split by comma
      split => { "upstream_addr" => "," }
      split => { "upstream_status" => "," }
      split => { "upstream_connect_time" => "," }
      split => { "upstream_response_length" => "," }
      split => { "request_time" => "," }
      split => { "upstream_response_time" => "," }
      split => { "upstream_header_time" => "," }
      # just for counting
      add_field => { "_count" => "_count" }
   }
  }

  # metric error requests
  if [status] == "500" {
    #metrics {
    #  meter => "http_%{status}"
    #  add_tag => [ "http_500", "http_500_all", "metric"]
    #}

    metrics {
      meter => ["http_%{status}_upstream_%{[upstream_addr][0]}"]
      add_tag => [ "http_500", "http_500_upstream", "metric"]
      add_field => {
        name => "http_%{status}_upstream_%{[upstream_addr][0]}"
      }
    }
  }

  #metrics {
  #  meter => "%{_count}"
  #  add_tag => [ "count", "metric"]
  #}


}

output {
  if "metric" in [tags] {
    if "http_500_all" in [tags] {
      stdout {
        codec => line {
          format => "request_http_500_rate_1m: %{[http_500][rate_1m]}"
        }
      }
    }

    if "http_500_upstream" in [tags] {
      stdout { codec => rubydebug }
    }

    if "http_500_upstream" in [tags] {
      stdout {
        codec => line {
          format => "requests_count_rate_1m: %{[event][message]}"
        }
      }
    }

    if "count" in [tags]{
      stdout {
        codec => line {
          format => "requests_count_rate_1m: %{[_count][rate_1m]}"
        }
      }
    }
  }
  # stdout { codec => rubydebug }
}
